---
import Tag from './tag.astro';
interface Props {
    title: string;
    link?: string;
    github: string;
    tags: Array<string>;
    description: string;
}
const { title, link, github, tags, description } = Astro.props;
---

<script>
document.addEventListener('alpine:init', () => {
    Alpine.data('minifiedContent', () => ({
        maxLength: 240,
        minContent: '',
        lenght: 0,
        isCollapsed: true,
        setMinifyContent(text: string) {
            this.lenght = text.length;
            this.minContent = text.slice(0, this.maxLength);
        },
        toggleShow() {
            this.isCollapsed = !this.isCollapsed;
        }
    }))
    Alpine.data('hasLink', () => ({
        hasLink(text: any){
            return text.startsWith("https") ? true : false;
        }
    }))
})
</script>

<div class="flex flex-col md:w-96 md:h-96 justify-around space-y-4 py-4 px-6 bg-item rounded-xl border-secondary border-2 shadow-2xl shadow-item">
    <div class="flex justify-between text-xl md:text-2xl">
        <h3>{title}</h3>
        <div x-data="hasLink" id="links" class="text-primary">
            <template x-if={`hasLink('${link}')`}>
                <a target="_blank" href={link} class="icon-external-link"></a>
            </template>
            <template x-if={`!hasLink('${link}')`}>
                <button class="icon-external-link text-gray-500" disabled></button>
            </template>
            <a target="_blank" href={github} class="icon-github"></a>
        </div>
    </div>
    <div x-data="minifiedContent">
        <p x-init={`setMinifyContent('${description}')`}>
            <span x-transition:enter="transition-all ease-in duration-500"
                x-transition:enter-start="opacity-0 blur-sm translate-x-full"
                x-transition:enter-end="opacity-100 blur-0 translate-x-0" class="overflow-hidden"
                x-text={`!isCollapsed ? '${description}' : minContent`}></span>
            <button class="text-highlight" 
                x-show="lenght > maxLength"
                x-on:click="toggleShow()"
                x-text="!isCollapsed ? 'Ver menos' : '...Ver mÃ¡s'"></button>
        </p>
    </div>
    <div id="tags" class="flex flex-wrap text-xs">
        {tags.map((tag: string) => (
            <Tag text={tag}></Tag>
            ))}
    </div>
</div>